import PDFDocument from 'pdfkit';
import moment from 'moment';
import Order from '../models/Order.js';
import OrderItem from '../models/OrderItem.js';
import pkg from 'number-to-words';
const { toWords } = pkg;

export const generateInvoice = async (req, res) => {
  try {
    const { orderId } = req.params;
    const order = await Order.findById(orderId).populate('customer user');
    if (!order) return res.status(404).send('Order not found');

    const items = await OrderItem.find({ order: order._id }).populate('product');

    const doc = new PDFDocument({ margin: 40, size: 'A4' });
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=invoice-${orderId}.pdf`);
    doc.pipe(res);

    // Header
    doc
      .fontSize(18)
      .font('Helvetica-Bold')
      .text('YUVA PLASTICS INDUSTRIES', { align: 'center' })
      .fontSize(12)
      .font('Helvetica')
      .text('At Mamnapur, Taluka Khultabad, Post Golegaon', { align: 'center' })
      .text('Aurangabad, Maharashtra - 431101, India', { align: 'center' })
      .text('GSTIN: 27BFTPH4696N1ZD', { align: 'center' })
      .text('Email: yuvaplastics@gmail.com', { align: 'center' })
      .moveDown(1.5);

    doc
      .rect(40, doc.y, 520, 25)
      .fill('#eeeeee')
      .stroke()
      .fillColor('#000')
      .font('Helvetica-Bold')
      .fontSize(14)
      .text('TAX INVOICE', 0, doc.y + 5, { align: 'center' })
      .moveDown(2);

    // Invoice Info
    const leftX = 40;
    const rightX = 320;
    const lineHeight = 16;
    const startY = doc.y;

    doc
      .fontSize(11)
      .font('Helvetica-Bold')
      .text('Invoice Details:', leftX, startY)
      .font('Helvetica')
      .text(`Invoice No: ${order.orderId}`, leftX, startY + lineHeight)
      .text(`Date: ${moment(order.createdAt).format('DD-MMM-YYYY')}`, leftX, startY + lineHeight * 2)
      .text(`Generated By: ${order.user?.name || 'Admin'}`, leftX, startY + lineHeight * 3);

    doc
      .font('Helvetica-Bold')
      .text('Customer Details:', rightX, startY)
      .font('Helvetica')
      .text(`Name: ${order.customer.name}`, rightX, startY + lineHeight)
      .text(`Type: ${order.customer.type}`, rightX, startY + lineHeight * 2)
      .text(`Email: ${order.customer.email}`, rightX, startY + lineHeight * 3)
      .text(`Address: ${order.customer.address || '—'}`, rightX, startY + lineHeight * 4)
      .moveDown(2);

    // Items Table
    const tableTop = doc.y;
    const rowHeight = 20;
    const colWidths = [40, 260, 80, 80, 80];

    const drawTableRow = (y, cols, bold = false) => {
      const font = bold ? 'Helvetica-Bold' : 'Helvetica';
      doc.font(font).fontSize(11);
      let x = 40;
      cols.forEach((text, idx) => {
        doc.text(text, x + 5, y + 5, {
          width: colWidths[idx] - 10,
          align: 'left',
        });
        x += colWidths[idx];
      });
    };

    const drawLine = (y) => {
      doc.moveTo(40, y).lineTo(560, y).stroke();
    };

    drawLine(tableTop);
    drawTableRow(tableTop, ['S.No', 'Description', 'Quantity', 'Rate', 'Total'], true);
    drawLine(tableTop + rowHeight);

    let y = tableTop + rowHeight;
    let totalAmount = 0;

    items.forEach((item, idx) => {
      const qty = item.quantity;
      const rate = item.unitPrice;
      const total = qty * rate;
      totalAmount += total;

      drawTableRow(y, [
        `${idx + 1}`,
        item.product.name,
        qty.toString(),
        `₹${rate.toFixed(2)}`,
        `₹${total.toFixed(2)}`
      ]);
      drawLine(y + rowHeight);
      y += rowHeight;
    });

    const discount = order.discount || 0;
    const netPayable = order.netPayable || (totalAmount - discount);
    const amountPaid = order.payment?.amountPaid || 0;
    const balanceRemaining = order.payment?.balanceRemaining || 0;
    const paymentStatus = order.payment?.status || "Unpaid";
    const roundedTotal = Math.round(netPayable);
    const roundOff = +(roundedTotal - netPayable).toFixed(2);

    // Totals Section
    doc.moveDown(2);
    doc.font('Helvetica-Bold').text('Payment Summary', 40);
    doc.font('Helvetica');
    doc.text(`Subtotal: ₹${totalAmount.toFixed(2)}`, 400);
    doc.text(`Discount: ₹${discount.toFixed(2)}`, 400);
    doc.text(`Round Off: ₹${roundOff}`, 400);
    doc.font('Helvetica-Bold').text(`Net Payable: ₹${roundedTotal}`, 400);
    doc.moveDown();
    doc.font('Helvetica').text(`Amount Paid: ₹${amountPaid.toFixed(2)}`, 400);
    doc.text(`Balance Remaining: ₹${balanceRemaining.toFixed(2)}`, 400);
    doc.text(`Payment Status: ${paymentStatus}`, 400).moveDown();

    // Words
    doc.font('Helvetica').text(
      `Amount in Words: INR ${toWords(roundedTotal).replace(/^\w/, c => c.toUpperCase())} Only`
    ).moveDown();

    // Declaration
    doc
      .fontSize(10)
      .text('Declaration:', { underline: true })
      .text('We declare that this invoice shows the actual price of the goods described and that all particulars are true and correct.')
      .moveDown().moveDown().moveDown().moveDown();

    doc
      .text('for YUVA PLASTICS INDUSTRIES', { align: 'right' })
      .text('Authorized Signatory', { align: 'right' });

    doc.end();
  } catch (error) {
    console.error('Invoice error:', error);
    res.status(500).send('Internal server error while generating invoice');
  }
};
